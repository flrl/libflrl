#include "test/unitmain.h"

#include "src/hashmap.c"

static void assert_hashmap_invariants(const HashMap *hm)
{
    uint32_t i;
    uint32_t count, deleted;

    assert_ptr_equal(0, (uintptr_t) hm & 63u);

    if (!hm->alloc) {
        assert_null(hm->hash);
        assert_null(hm->klen);
        assert_null(hm->key);
        assert_null(hm->value);
        return;
    }

    assert_non_null(hm->hash);
    assert_non_null(hm->klen);
    assert_non_null(hm->key);
    assert_non_null(hm->value);

    assert_int_equal(hm->alloc, nextpow2(hm->alloc));
    assert_int_equal(hm->mask, hm->alloc - 1);
    assert_in_range(hm->count + hm->deleted, 0, hm->alloc);

    // XXX thresholds

    count = deleted = 0;
    for (i = 0; i < hm->alloc; i++) {
        switch (hm->klen[i]) {
        case HASHMAP_KEY_DELETED:
            deleted ++;
            /* fall through */
        case HASHMAP_KEY_NULL:
            assert_null(hm->key[i].kptr);
            assert_null(hm->value[i]);
            break;
        default:
            count ++;
            assert_non_null(hm->key[i].kptr);
            break;
        }
    }
    assert_int_equal(count, hm->count);
    assert_int_equal(deleted, hm->deleted);
}

const char *const um_group_name = "hashmap";
const struct CMUnitTest um_group_tests[] =
{
};
const size_t um_group_n_tests = sizeof(um_group_tests)
                                / sizeof(um_group_tests[0]);
CMFixtureFunction um_group_setup = NULL;
CMFixtureFunction um_group_teardown = NULL;

/* vim: set ft=c :*/
